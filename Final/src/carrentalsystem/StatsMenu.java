/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package carrentalsystem;

import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author denveranggada
 */
public class StatsMenu extends javax.swing.JFrame {

    /**
     * Creates new form StatsMenu
     */
    public StatsMenu() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        CustGender = new javax.swing.JButton();
        CustAge = new javax.swing.JButton();
        Feedback = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        CarsOwned = new javax.swing.JButton();
        CarsRented = new javax.swing.JButton();
        CarsAvail = new javax.swing.JButton();
        Payment = new javax.swing.JButton();
        Exit1 = new javax.swing.JButton();
        MainMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jLabel20.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel20.setText(" Drive better with us ");

        jLabel21.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel21.setText("as your partner.");

        jLabel22.setFont(new java.awt.Font("MV Boli", 1, 36)); // NOI18N
        jLabel22.setText("CRS");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel21))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel22)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel22)
                .addGap(29, 29, 29)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel21)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Customer"));

        CustGender.setText("Gender");
        CustGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustGenderActionPerformed(evt);
            }
        });

        CustAge.setText("Age");
        CustAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustAgeActionPerformed(evt);
            }
        });

        Feedback.setText("Feedback");
        Feedback.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FeedbackMouseClicked(evt);
            }
        });
        Feedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeedbackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(CustAge, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Feedback, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(CustGender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CustGender)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CustAge)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Feedback)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Car (by brand)"));

        CarsOwned.setText("Cars Owned");
        CarsOwned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CarsOwnedActionPerformed(evt);
            }
        });

        CarsRented.setText("Cars On Rent");
        CarsRented.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CarsRentedActionPerformed(evt);
            }
        });

        CarsAvail.setText("Cars Available");
        CarsAvail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CarsAvailActionPerformed(evt);
            }
        });

        Payment.setText("Payment");
        Payment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PaymentMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(CarsRented, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CarsAvail, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(CarsOwned, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Payment, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CarsOwned)
                    .addComponent(Payment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CarsRented)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CarsAvail)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        Exit1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Exit1.setText("X");
        Exit1.setToolTipText("");
        Exit1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Exit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit1ActionPerformed(evt);
            }
        });

        MainMenu.setText("Main Menu");
        MainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 30, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(Exit1))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MainMenu)
                        .addGap(15, 15, 15))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Exit1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MainMenu)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Exit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit1ActionPerformed
        new Exit().setVisible(true);
    }//GEN-LAST:event_Exit1ActionPerformed

    private void MainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainMenuActionPerformed
        new MainMenuAdmin().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_MainMenuActionPerformed

    private void CustGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustGenderActionPerformed
        try{
        ArrayList<String> allcust = DataIO.getAllCustomers();
        String[] custall = allcust.toArray(new String[0]);
        int m=0;
        int f=0;
        for(int i=0; i<allcust.size(); i++){
            Customer c = DataIO.verifyUsername(custall[i]);
                if(custall[i].equals(c.getUsername())){
                    if(c.getGender().equals("Male")){
                        m++;
                    }
                    else{
                        f++;
                    }
                }
       }
        JOptionPane.showMessageDialog(null, "There are in total "+m+" male customers and "+f+" female customers");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "There is no registered customer currently");
        }
    }//GEN-LAST:event_CustGenderActionPerformed

    private void CustAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustAgeActionPerformed
        try{
        ArrayList<String> allcust = DataIO.getAllCustomers();
        String[] custall = allcust.toArray(new String[0]);
        int u20=0;
        int a2029=0;
        int a3039=0;
        int a4049=0;
        int a5059=0;
        int amt60=0;
        for(int i=0; i<allcust.size(); i++){
            Customer c = DataIO.verifyUsername(custall[i]);
                if(custall[i].equals(c.getUsername())){
                    if(c.getAge()<20){
                        u20++;
                    }
                    else if (c.getAge()>=20 && c.getAge()<29){
                        a2029++;
                    }
                    else if (c.getAge()>=30 && c.getAge()<39){
                        a3039++;
                    }
                    else if (c.getAge()>=40 && c.getAge()<49){
                        a4049++;
                    }
                    else if (c.getAge()>=50 && c.getAge()<59){
                        a5059++;
                    }
                    else if (c.getAge()>=60){
                        amt60++;
                    }
                    else{
                        System.out.println("Unknown Error");
                    }
                }
        }
        JOptionPane.showMessageDialog(null, "This is the age group of customers:\nUnder 20: "+u20+"\n20-29: "+a2029+"\n30-39: "+a3039+"\n40-49: "+a4049+"\n50-59: "+a5059+"\nMore than 60: "+amt60);
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, "There is no customer registered currently");
        }
    }//GEN-LAST:event_CustAgeActionPerformed

    private void CarsOwnedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CarsOwnedActionPerformed
        try{
        ArrayList<String> allcars = DataIO.getAllCarsOwned();
        String[] carsall = allcars.toArray(new String[0]);
        int toyota=0;
        int daihatsu=0;
        int mb=0;
        int bmw=0;
        int lexus=0;
        int proton=0;
        int perodua=0;
        int subaru=0;
        int honda=0;
        int mitsubishi=0;
        int kia=0;
        int hyundai=0;
        int nissan=0;
        int suzuki=0;
        int peugeot=0;
        int vw=0;
        int citroen=0;
        int skoda=0;
        int seat=0;
        int mazda=0;
        int volvo=0;
        int others=0;
        for(int i=0; i<allcars.size(); i++){
            CarRent c = DataIO.findID(carsall[i]);
            if(carsall[i].equals(c.getId())){
                switch (c.getBrand()) {
                    case "TOYOTA":
                        toyota++;
                        break;
                    case "DAIHATSU":
                        daihatsu++;
                        break;
                    case "MERCEDES-BENZ":
                        mb++;
                        break;
                    case "BMW":
                        bmw++;
                        break;
                    case "LEXUS":
                        lexus++;
                        break;
                    case "PROTON":
                        proton++;
                        break;
                    case "PERODUA":
                        perodua++;
                        break;
                    case "SUBARU":
                        subaru++;
                        break;
                    case "HONDA":
                        honda++;
                        break;
                    case "MITSUBISHI":
                        mitsubishi++;
                        break;
                    case "KIA":
                        kia++;
                        break;
                    case "HYUNDAI":
                        hyundai++;
                        break;
                    case "NISSAN":
                        nissan++;
                        break;
                    case "SUZUKI":
                        suzuki++;
                        break;
                    case "PEUGEOT":
                        peugeot++;
                        break;
                    case "VOLKSWAGEN":
                        vw++;
                        break;
                    case "CITROEN":
                        citroen++;
                        break;
                    case "SKODA":
                        skoda++;
                        break;
                    case "SEAT":
                        seat++;
                        break;
                    case "MAZDA":
                        mazda++;
                        break;
                    case "VOLVO":
                        volvo++;
                        break;
                    default:
                        others++;
                        break;
                }
            }
        }
        JOptionPane.showMessageDialog(null, "This is the brands owned by us:\nToyota: "+toyota+"\nDaihatsu: "+daihatsu+"\nMercedes-Benz: "+mb+"\nBMW: "+bmw+"\nlexus: "+lexus+"\nProton: "+proton+"\nPerodua: "+perodua+"\nSubaru: "+subaru+"\nHonda: "+honda+"\nMitsubishi: "+mitsubishi+"\nKIA: "+kia+"\nHyundai: "+hyundai+"\nNissan: "+nissan+"\nSuzuki: "+suzuki+"\nPeugeot: "+peugeot+"\nVolkswagen: "+vw+"\nCitroen: "+citroen+"\nSkoda: "+skoda+"\nSeat: "+seat+"\nMazda: "+mazda+"\nVolvo: "+volvo+"\nOthers: "+others);
        }catch(Exception e){
         JOptionPane.showMessageDialog(null, "There is no car currently registered");
        }
    }//GEN-LAST:event_CarsOwnedActionPerformed

    private void CarsRentedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CarsRentedActionPerformed
        try{
        ArrayList<String> allcars = DataIO.getAllCars();
        String[] carsall = allcars.toArray(new String[0]);
        int toyota=0;
        int daihatsu=0;
        int mb=0;
        int bmw=0;
        int lexus=0;
        int proton=0;
        int perodua=0;
        int subaru=0;
        int honda=0;
        int mitsubishi=0;
        int kia=0;
        int hyundai=0;
        int nissan=0;
        int suzuki=0;
        int peugeot=0;
        int vw=0;
        int citroen=0;
        int skoda=0;
        int seat=0;
        int mazda=0;
        int volvo=0;
        int others=0;
        int i=0,j=0;
            try{
                while(i<allcars.size()){
                    while(j<allcars.size()){
                        if(carsall[j].equals(carsall[i])){
                            CarRent c = DataIO.findID(carsall[j]);
                            switch (c.getBrand()) {
                                case "TOYOTA":
                                    toyota++;
                                    break;
                                case "DAIHATSU":
                                    daihatsu++;
                                    break;
                                case "MERCEDES-BENZ":
                                    mb++;
                                    break;
                                case "BMW":
                                    bmw++;
                                    break;
                                case "LEXUS":
                                    lexus++;
                                    break;
                                case "PROTON":
                                    proton++;
                                    break;
                                case "PERODUA":
                                    perodua++;
                                    break;
                                case "SUBARU":
                                    subaru++;
                                    break;
                                case "HONDA":
                                    honda++;
                                    break;
                                case "MITSUBISHI":
                                    mitsubishi++;
                                    break;
                                case "KIA":
                                    kia++;
                                    break;
                                case "HYUNDAI":
                                    hyundai++;
                                    break;
                                case "NISSAN":
                                    nissan++;
                                    break;
                                case "SUZUKI":
                                    suzuki++;
                                    break;
                                case "PEUGEOT":
                                    peugeot++;
                                    break;
                                case "VOLKSWAGEN":
                                    vw++;
                                    break;
                                case "CITROEN":
                                    citroen++;
                                    break;
                                case "SKODA":
                                    skoda++;
                                    break;
                                case "SEAT":
                                    seat++;
                                    break;
                                case "MAZDA":
                                    mazda++;
                                    break;
                                case "VOLVO":
                                    volvo++;
                                    break;
                                default:
                                    others++;
                                    break;
                            }                           
                            if(j<allcars.size()){
                                i++;
                            }
                            j++;
                        }
                        else{
                             break;
                        }
                    }
                i++;
                }
            JOptionPane.showMessageDialog(null, "This is the brands currently on rent:\nToyota: "+toyota+"\nDaihatsu: "+daihatsu+"\nMercedes-Benz: "+mb+"\nBMW: "+bmw+"\nlexus: "+lexus+"\nProton: "+proton+"\nPerodua: "+perodua+"\nSubaru: "+subaru+"\nHonda: "+honda+"\nMitsubishi: "+mitsubishi+"\nKIA: "+kia+"\nHyundai: "+hyundai+"\nNissan: "+nissan+"\nSuzuki: "+suzuki+"\nPeugeot: "+peugeot+"\nVolkswagen: "+vw+"\nCitroen: "+citroen+"\nSkoda: "+skoda+"\nSeat: "+seat+"\nMazda: "+mazda+"\nVolvo: "+volvo+"\nOthers: "+others);
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"All cars are currently available, please refer to all cars stats instead.");
            }
        }
        catch(Exception e){
          JOptionPane.showMessageDialog(null, "There is no car currently registered");  
        }
    }//GEN-LAST:event_CarsRentedActionPerformed

    private void CarsAvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CarsAvailActionPerformed
        try{
        ArrayList<String> allcars = DataIO.getAllCarsOwned();
        String[] carsall = allcars.toArray(new String[0]);
        int toyota=0;
        int daihatsu=0;
        int mb=0;
        int bmw=0;
        int lexus=0;
        int proton=0;
        int perodua=0;
        int subaru=0;
        int honda=0;
        int mitsubishi=0;
        int kia=0;
        int hyundai=0;
        int nissan=0;
        int suzuki=0;
        int peugeot=0;
        int vw=0;
        int citroen=0;
        int skoda=0;
        int seat=0;
        int mazda=0;
        int volvo=0;
        int others=0;
            try{
                int i=0;
                while(i<allcars.size()){
                CarRent c = DataIO.findID(carsall[i]);
                Car found = DataIO.verifyID(carsall[i]);
                if (found == null){
                    switch (c.getBrand()) {
                        case "TOYOTA":
                            toyota++;
                            break;
                        case "DAIHATSU":
                            daihatsu++;
                            break;
                        case "MERCEDES-BENZ":
                            mb++;
                            break;
                        case "BMW":
                            bmw++;
                            break;
                        case "LEXUS":
                            lexus++;
                            break;
                        case "PROTON":
                            proton++;
                            break;
                        case "PERODUA":
                            perodua++;
                            break;
                        case "SUBARU":
                            subaru++;
                            break;
                        case "HONDA":
                            honda++;
                            break;
                        case "MITSUBISHI":
                            mitsubishi++;
                            break;
                        case "KIA":
                            kia++;
                            break;
                        case "HYUNDAI":
                            hyundai++;
                            break;
                        case "NISSAN":
                            nissan++;
                            break;
                        case "SUZUKI":
                            suzuki++;
                            break;
                        case "PEUGEOT":
                            peugeot++;
                            break;
                        case "VOLKSWAGEN":
                            vw++;
                            break;
                        case "CITROEN":
                            citroen++;
                            break;
                        case "SKODA":
                            skoda++;
                            break;
                        case "SEAT":
                            seat++;
                            break;
                        case "MAZDA":
                            mazda++;
                            break;
                        case "VOLVO":
                            volvo++;
                            break;
                        default:
                            others++;
                            break;
                    }
                }    
                i++;
                }
            JOptionPane.showMessageDialog(null, "This is the brands currently available:\nToyota: "+toyota+"\nDaihatsu: "+daihatsu+"\nMercedes-Benz: "+mb+"\nBMW: "+bmw+"\nlexus: "+lexus+"\nProton: "+proton+"\nPerodua: "+perodua+"\nSubaru: "+subaru+"\nHonda: "+honda+"\nMitsubishi: "+mitsubishi+"\nKIA: "+kia+"\nHyundai: "+hyundai+"\nNissan: "+nissan+"\nSuzuki: "+suzuki+"\nPeugeot: "+peugeot+"\nVolkswagen: "+vw+"\nCitroen: "+citroen+"\nSkoda: "+skoda+"\nSeat: "+seat+"\nMazda: "+mazda+"\nVolvo: "+volvo+"\nOthers: "+others);
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,"All cars are currently available, please refer to all cars stats instead.");
            }  
        }    
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "There is no car available currently");
        }
    }//GEN-LAST:event_CarsAvailActionPerformed

    private void FeedbackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FeedbackMouseClicked
        try{
            ArrayList<String> feedback = DataIO.getAllFeedback();
            String[] allfeedback = feedback.toArray(new String[0]);
            int total=0, score=0;
            for(int i=0;i<feedback.size();i++){
                score =Integer.parseInt(allfeedback[i]);
                total = score + total;
                score=0;
            }
            double avg = total/feedback.size();
            if (avg <=1){
              JOptionPane.showMessageDialog(null, "Overall, the customer is very badly disappointed with the average score of "+ String.format("%.2f", avg));
            }
            else if (avg <=2){
              JOptionPane.showMessageDialog(null, "Overall, the customer is very disappointed with the average score of "+ String.format("%.2f", avg));
            }
            else if (avg <=3){
              JOptionPane.showMessageDialog(null, "Overall, the customer is ok with our service with the average score of "+ String.format("%.2f", avg));
            }
            else if (avg<=4){
              JOptionPane.showMessageDialog(null, "Overall, the customer is satisfied with the average score of "+  String.format("%.2f", avg)); 
            }
            else{
              JOptionPane.showMessageDialog(null, "Overall, the customer is very satisfied with the average score of "+  String.format("%.2f", avg)); 
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,"There is no feedback provided currently");
        }
    }//GEN-LAST:event_FeedbackMouseClicked

    private void PaymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PaymentMouseClicked
        try{
        ArrayList<String> allcarsreturned = DataIO.getAllCarsReturned();
        String[] carsreturned = allcarsreturned.toArray(new String[0]);
        int total=0 ,amount= 0, cust=0;
            for(int i=0;i<allcarsreturned.size();i++){
                CarReturn c = DataIO.verifyCar(carsreturned[i]);
                if(c!=null){
                    amount=c.getFees()+c.getFine();
                    total = amount + total;
                    amount=0;
                    cust++;
                }
            }
            JOptionPane.showMessageDialog(null,"There are so far "+cust+" payments have been done with the total money spent is RM "+total+" and the average spending of "+total/cust);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "There is no payment done currently");
        }
    }//GEN-LAST:event_PaymentMouseClicked

    private void FeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeedbackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FeedbackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatsMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatsMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatsMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatsMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatsMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CarsAvail;
    private javax.swing.JButton CarsOwned;
    private javax.swing.JButton CarsRented;
    private javax.swing.JButton CustAge;
    private javax.swing.JButton CustGender;
    private javax.swing.JButton Exit1;
    private javax.swing.JButton Feedback;
    private javax.swing.JButton MainMenu;
    private javax.swing.JButton Payment;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel9;
    // End of variables declaration//GEN-END:variables
}
